/* 
 * This document aims to explain how a new module is built.
 * Every module should mandatorily expose 3 functions: init, check, destroy.
 * 
 * check() is called to decide whether this module should be really started:
 * if it returns 0, the module has to be started.
 * 
 * init() is called after check, and is needed to init this module, ie 
 * setup all needed structures and variables, and call init_module if no 
 * errors happen during initialization. Else, it should disable this module.
 *
 * destroy() is called to free every resource used by a module.
 * 
 * Moreover, a callback function for poll can be provided for this module
 * (obviously only if a fd is passed inside init_module call).
 *
 * Finally, module.h should expose a set_module_self function that bind
 * module's internal own self_t struct to modules[SKEL] and sets 
 * mandatory functions.
 */

#include "module.h"

static void init(void);
static int check(void);
static void poll_cb(void);
static void destroy(void);

/* 
 * This module needs to be started AFTER MODULE1 and MODULE2 modules.
 * If MODULE1 is disabled, this module should be disabled too.
 * If MODULE2 is disabled, this module should start waiting only for MODULE1.
 */
static struct dependency dependencies[] = { {HARD, MODULE1}, {SOFT, MODULE2} };
static struct self_t self = {
    .name = "Skeleton",
    .idx = SKEL,
    .num_deps = SIZE(dependencies),
    .deps =  dependencies
};

void set_module_self(void) {
    modules[self.idx].self = &self;
    modules[self.idx].init = init;
    modules[self.idx].check = check;
    modules[self.idx].destroy = destroy;
    set_self_deps(&self);
}

/*
 * Init this module
 */
static void init(void) {
    int fd = f();
    if (fd > 0) {
        init_module(fd, self.idx, poll_cb);
    } else {
        disable_module(self.idx);
    }
}

/* 
 * Perform varius checks to decide whether this module should be inited 
 */
static int check(void) {
    return 0;
}

/*
 * Callback for POLL events on main_p[SKEL].fd
 */
static void poll_cb(void) {
    printf("Called by poll!\n");
}

/*
 * Destroy every resource used by this module
 */
static void destroy(void) {
    printf("I'm being destroyed!\n");
}
