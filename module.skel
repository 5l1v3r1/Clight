/* 
 * This document aims to explain how a new module is built.
 * Every module should mandatorily expose 4 functions: init, check, callback, destroy.
 * 
 * check() is called to decide whether this module should be really started:
 * if it returns 0, the module has to be started.
 * 
 * init() is called after check, and is needed to init this module, ie 
 * setup all needed structures and variables, and call init_module if no 
 * errors happen during initialization. Else, it should disable this module.
 *
 * callback() function for poll must be provided for this module,
 * leaving it blank if there is no need for a poll callback
 * 
 * destroy() is called to free every resource used by a module.
 *
 * Finally, module.h should expose a set_module_self function that binds
 * module's internal own self_t struct to global <struct module modules> and sets 
 * mandatory functions (using macro SET_SELF())
 */

#include "modules.h"

static void init(void);
static int check(void);
static void callback(void);
static void destroy(void);

/* 
 * This module needs to be started AFTER MODULE1 and MODULE2 modules.
 * If MODULE1 is disabled, this module should be disabled too.
 * If MODULE2 is disabled, this module should start waiting only for MODULE1.
 */
static struct dependency dependencies[] = { {HARD, MODULE1}, {SOFT, MODULE2} };
static struct self_t self = {
    .name = "Skeleton",
    .idx = SKEL,
    .num_deps = SIZE(dependencies),
    .deps =  dependencies
};

void set_module_self(void) {
    SET_SELF();
}

/*
 * Init this module through INIT_MOD macro.
 * INIT_MOD receives an fd (if fd == -1, module will be disabled)
 * and can receive a list of struct bus_cb: callbacks that are called
 * when Bus module processes certain module's matches,
 * eg: if this module would hook on new geoclue positions,
 * it should call:
 * struct bus_cb loc_cb = { LOCATION, location_callback };
 * INIT_MOD(fd, &loc_cb);
 * where location_callback is a cb executed by Bus module whenever
 * a new geoclue position is received.
 */
static void init(void) {
    int fd = start_timer(CLOCK_MONOTONIC, 0, 1);
    INIT_MOD(fd);
}

/* 
 * Perform varius checks to decide whether this module should be inited:
 * 0 for DO INIT, !0 for DO NOT INIT
 */
static int check(void) {
    return 0;
}

/*
 * Callback for POLL events on main_p[SKEL].fd
 */
static void callback(void) {
    printf("Called by poll!\n");
}

/*
 * Destroy every resource used by this module
 */
static void destroy(void) {
    printf("I'm being destroyed!\n");
}
