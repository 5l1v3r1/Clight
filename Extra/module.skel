#include <clight/commons.h>

/*
 * Rename to: myMod.c
 * 
 * Build with: gcc -shared -fPIC myMod.c -o myMod -Wno-unused
 * 
 * Place myMod in: $HOME/.local/share/clight/modules.d/ OR, globally, in /usr/share/clight/modules.d/
 * 
 * Libmodule's doc: https://libmodule.readthedocs.io/en/latest/?badge=latest
 */

MODULE("TEST");

static void init(void) {
    /* Topics on which you can subscribe can be found in clight/commons.h */
    m_subscribe(time_topic);
}

/* 
 * Whether this module should be actually created:
 * true if module must be created, !true otherwise.
 * 
 * Use this function as a starting filter: 
 * you may desire that a module is not started in certain conditions.
 * 
 * Eg: avoid registering the module on wayland (getenv("WAYLAND_DISPLAY") == NULL)
 */
static bool check(void) {
    return true;
}

/* 
 * Should return not-0 value when module can be actually started (and thus polled).
 * Use this to check intra-modules dependencies or any other env variable.
 * 
 * Eg: state.time != -1 to start after current daytime has been computed
 */
static bool evaluate(void) {
    return true;
}

/*
 * Destroyer function, called at module unload (at end of program).
 * If you allocated any heap structure, you must free it here.
 */
static void destroy(void) {
    /* ByeBye */
}

/*
 * PubSub callback
 */
static void receive(const msg_t *msg, const void *userdata) {
    if (msg->is_pubsub && msg->ps_msg->type == USER) {
        MSG_TYPE();
        switch (type) {
        case TIME_UPDATE: {
            time_upd *up = (time_upd *)msg->ps_msg->message;
            if (up->new == DAY) {
                // system("lookandfeeltool -a org.kde.breeze.desktop");
                INFO("We're now during the day!\n");
            } else {
                // system("lookandfeeltool -a org.kde.breezedark.desktop");
                INFO("We're now during the night!\n");
            }
            break;
        }
        default:
            break;
        }
    }
}
